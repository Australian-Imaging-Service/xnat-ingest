name: tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - name: Disable etelemetry
      run:  echo "NO_ET=TRUE" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}      

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install other dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt-dev git dcmtk

    - name: Update build tools
      run: python -m pip install --upgrade pip

    - name: Install Xnat-Ingest
      run: python -m pip install .[test]

    - name: Save XNAT username/password in ~/.netrc
      run: |
        echo "machine localhost:8080" > $HOME/.netrc
        echo "user admin" >> $HOME/.netrc
        echo "password admin" >> $HOME/.netrc
    - name: Pytest
      run: pytest -vvs --cov xnat_ingest --cov-config .coveragerc --cov-report xml .
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}


  # name: Docker build
  # on:
  #   push:
  #     branches:
  #       - main
  #     paths:
  #       - build/**
  
  # env:
  #   REGISTRY: ghcr.io
  #   IMAGE_NAME: ${{ github.repository }}
  
  # jobs:
  #   check:
  #     name: Check for changed Docker build files
  #     outputs:
  #       contexts: ${{ steps.check_files.outputs.contexts }}
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v3
  #         with:
  #           fetch-depth: 2
  
  #       - name: Check files
  #         id: check_files
  #         run: |
  #           contexts=""
  #           delim=""
  #           while IFS= read -r file; do
  #             [[ $file == build/* ]] || continue
  #             context=$(echo $file |cut -d '/' -f 2)
  #             [ -z $context ] && continue
  #             [[ $context == ${contexts##*,} ]] && continue
  #             contexts="${contexts}${delim}\"${context}\""
  #             delim=", "
  #           done < <(git diff --name-only HEAD^ HEAD)
  #           echo "contexts=[${contexts}]" >> "$GITHUB_OUTPUT"
  
  #   build-and-push-image:
  #     if: ${{ needs.check.outputs.contexts != '' }}
  #     strategy:
  #       fail-fast: false
  #       matrix:
  #         context: ${{ fromJSON(needs.check.outputs.contexts) }}
  #     needs:
  #       - check
  
  #     runs-on: ubuntu-latest
  
  #     permissions:
  #       contents: read
  #       packages: write
  
  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v3
  
  #       - name: Set up QEMU
  #         uses: docker/setup-qemu-action@v2
  
  #       - name: Set up Docker buildx
  #         uses: docker/setup-buildx-action@v2
  
  #       - name: Login to GitHub Container Registry
  #         uses: docker/login-action@v2
  #         with:
  #           registry: ghcr.io
  #           username: ${{ github.repository_owner }}
  #           password: ${{ secrets.GITHUB_TOKEN }}
  
  #       - name: Get Docker image tag
  #         run: |
  #           TAG=$(sed -n 's/^ARG DOCKER_IMAGE_TAG=\(.*\)$/\1/p' build/${{ matrix.context }}/Dockerfile)
  #           if [ -z $TAG ]; then
  #             echo "DOCKER_IMAGE_TAG=0.1.0" >> "$GITHUB_ENV"
  #           else
  #             echo "DOCKER_IMAGE_TAG=${TAG}" >> "$GITHUB_ENV"
  #           fi
  
  #       - name: Build and push Docker image
  #         uses: docker/build-push-action@v3
  #         with:
  #           cache-from: type=registry,ref=ghcr.io/sydneyresearchtech/${{ matrix.context }}:buildcache
  #           cache-to: type=registry,ref=ghcr.io/sydneyresearchtech/${{ matrix.context }}:buildcache,mode=max
  #           context: build/${{ matrix.context }}
  #           platforms: linux/amd64,linux/arm64
  #           push: true
  #           tags: |
  #             ghcr.io/sydneyresearchtech/${{ matrix.context }}:${{ env.DOCKER_IMAGE_TAG }}        